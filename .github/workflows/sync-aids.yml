name: Sync AIDs from AOSP and Publish Release

on:
  push:
    branches:
      - '**' # Run on pushes to all branches
  workflow_dispatch: # Allow manual triggering

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Get branch name
        id: get_branch
        run: echo "branch_name=${GITHUB_REF##*/}" >> "$GITHUB_OUTPUT"

      - name: Download android_filesystem_config.h
        id: download_header
        run: |
          BRANCH="${{ steps.get_branch.outputs.branch_name }}"
          URL="https://android.googlesource.com/platform/system/core/+/refs/heads/${BRANCH}/libcutils/include/private/android_filesystem_config.h?format=TEXT"
          echo "Fetching from ${URL}"
          # Use curl -f to fail if the URL returns a 404 error
          if curl -sfL "${URL}" | base64 --decode > android_filesystem_config.h; then
            echo "Download successful."
            echo "downloaded=true" >> "$GITHUB_OUTPUT"
          else
            echo "Failed to download for branch ${BRANCH}. It might not exist in AOSP."
            echo "downloaded=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Generate all config files
        if: steps.download_header.outputs.downloaded == 'true'
        run: |
          # Ensure the generation script is executable
          chmod +x ./generate-aids.sh
          
          # Create the release directory
          mkdir -p release
          
          # Generate files into the release directory with new names
          ./generate-aids.sh passwd android_filesystem_config.h > release/passwd
          ./generate-aids.sh group android_filesystem_config.h > release/group
          ./generate-aids.sh adduser android_filesystem_config.h > release/adduser.sh
          ./generate-aids.sh sysusers android_filesystem_config.h > release/aids.conf
          
          # Give the generated shell script executable permissions
          chmod +x release/adduser.sh
          
          echo "All config files generated in release/ directory."

      - name: Commit and push changes
        if: steps.download_header.outputs.downloaded == 'true'
        id: commit_push
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "ci: Update AIDs and generated files for ${{ steps.get_branch.outputs.branch_name }}"
          # Only commit the config header and the release directory
          file_pattern: "android_filesystem_config.h release/"

      - name: Generate Next Sequential Tag
        # Ensure this step uses the same condition as the release creation step
        if: steps.download_header.outputs.downloaded == 'true' && steps.commit_push.outputs.changes_detected == 'true' && github.ref == 'refs/heads/main'
        id: generate_tag
        run: |
          # 1. Get the base tag for the current week, e.g. '25w34'
          BASE_TAG=$(date -u +'%yw%V')
          echo "Base tag for this week: $BASE_TAG"
          
          # 2. Fetch all remote tags to get the latest state
          git fetch --prune --tags
          
          # 3. Find the latest existing tag for the current week
          LATEST_TAG=$(git tag -l "${BASE_TAG}*" | sort -V | tail -n 1)
          
          if [ -z "$LATEST_TAG" ]; then
            # 4a. If no tag exists for this week, start with 'a'
            NEXT_SUFFIX='a'
            echo "No existing tags for this week. Starting with suffix 'a'."
          else
            # 4b. If a tag exists, increment the last letter
            echo "Latest existing tag found: $LATEST_TAG"
            LATEST_SUFFIX=${LATEST_TAG: -1}
            NEXT_SUFFIX=$(echo "$LATEST_SUFFIX" | tr "a-y" "b-z")
            echo "Latest suffix is '$LATEST_SUFFIX', next suffix will be '$NEXT_SUFFIX'."
          fi

          # 5. Compose the new tag
          NEW_TAG="auto-main-${BASE_TAG}${NEXT_SUFFIX}"
          echo "Generated new tag: $NEW_TAG"
          
          # 6. Set the new tag as output
          echo "next_tag=${NEW_TAG}" >> "$GITHUB_OUTPUT"

      - name: Create Pre-release on main branch
        if: steps.download_header.outputs.downloaded == 'true' && steps.commit_push.outputs.changes_detected == 'true' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          # Use the unique tag name generated above with a letter suffix
          tag_name: ${{ steps.generate_tag.outputs.next_tag }}
          name: "Auto-generated AIDs for main (${{ steps.generate_tag.outputs.next_tag }})"
          body: "Automated pre-release with updated AID configuration files from AOSP 'main' branch."
          prerelease: true
          files: release/*
